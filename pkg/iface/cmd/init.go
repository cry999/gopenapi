package cmd

import (
	"os"
	"path/filepath"

	"github.com/cry999/gopenapi/pkg/openapi"
	"github.com/spf13/cobra"
)

func init() {
	wd, _ := os.Getwd()

	initCmd.PersistentFlags().StringVarP(&projectDir, "project-dir", "p", wd, "project directory (default is $(pwd))")

	rootCmd.AddCommand(initCmd)
}

var (
	// flags
	projectDir string

	// command
	initCmd = &cobra.Command{
		Use:   "init",
		Short: "Create OpenAPI scaffold directories",
		Long: `Create below directories:

example
├── components
│   ├── headers
│   ├── parameters
│   ├── requestBodies
│   ├── responses
│   └── schemas
├── paths
├── tags
├── info.yml
├── security.yml
└── servers.yml
`,
		RunE: runInit,
	}

	initDirectories = []string{
		"components/headers",
		"components/parameters",
		"components/requestBodies",
		"components/responses",
		"components/schemas",
		"paths",
	}
)

func runInit(cmd *cobra.Command, args []string) error {
	for _, dir := range initDirectories {
		dir = filepath.Join(projectDir, dir)
		if err := os.MkdirAll(dir, 0o755); err != nil {
			return err
		}
	}

	project := filepath.Base(projectDir)
	if err := openapi.DumpOpenAPIVersion(projectDir, "3.0.0"); err != nil {
		return err
	}

	if err := openapi.DumpInfo(projectDir, &openapi.Info{
		Title:       project,
		Description: "Auto generated by gopenapi",
		Version:     "0.0.1",
	}); err != nil {
		return err
	}

	if err := openapi.DumpServers(projectDir, []*openapi.Server{
		{
			URL:         openapi.MustParseURL("http://localhost/api/v1"),
			Description: "Local development",
		},
	}); err != nil {
		return err
	}

	if err := openapi.DumpSecurity(projectDir, []openapi.SecurityRequirement{
		{"apiKey": []string{}},
	}); err != nil {
		return err
	}

	if err := openapi.DumpTags(projectDir, []*openapi.Tag{
		{
			Name:        "Sample",
			Description: "Sample API groups",
		},
	}); err != nil {
		return err
	}

	return nil
}
